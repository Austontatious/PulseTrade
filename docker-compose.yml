version: "3.9"

services:
  db:
    image: timescale/timescaledb:latest-pg16
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-pulse}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-pulsepass}
      POSTGRES_DB: ${POSTGRES_DB:-pulse}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/001-init.sql:ro
      - ./db/init_policies.sql:/docker-entrypoint-initdb.d/010-policies.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pulse} -d ${POSTGRES_DB:-pulse}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports: ["6379:6379"]

  api:
    build:
      context: .
      dockerfile: services/api/Dockerfile
    env_file: .env
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      worker:
        condition: service_started
    ports: ["8001:8000"]
    healthcheck:
      test:
        - CMD-SHELL
        - python -c "import urllib.request; urllib.request.urlopen('http://127.0.0.1:8000/health')"
      interval: 15s
      timeout: 5s
      retries: 5

  ingest:
    build:
      context: .
      dockerfile: services/ingest/Dockerfile
    env_file: .env
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    command: ["python", "-m", "ingest.run"]

  worker:
    build:
      context: .
      dockerfile: services/worker/Dockerfile
    env_file: .env
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    command: ["python", "-m", "worker.runner"]

  forecast:
    build:
      context: .
      dockerfile: services/forecast/Dockerfile
    env_file: .env
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    command: ["python", "-m", "forecast.run"]

  policy:
    build:
      context: .
      dockerfile: services/policy/Dockerfile
    env_file: .env
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      forecast:
        condition: service_started
    command: ["python", "-m", "policy.run"]

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports: ["9090:9090"]
    depends_on: [api]

volumes:
  db_data:
